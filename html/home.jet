<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content= "width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <title>Home</title>
    </head>
    <body>
        <nav class="navbar navbar-dark bg-primary sticky-top mb-3">
            <div class="container-fluid">
                <span class="navbar-brand mb-0 h1">WSChat</span>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </nav>
        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <h3>Chat</h3>
                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" name="username" id="username" class="form-control" autocomplete="off" />
                    </div>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <input type="text" name="message" id="message" class="form-control" autocomplete="off" />
                        <a class="btn btn-outline-primary mt-3" href="javascript:void(0)" role="button" id="sendBtn">Send Message</a>
                    </div>
                    <div class="card border-light border-2 mt-3 h-100 w-100">
                        <div class="card-header">Chat Room</div>
                        <input type="hidden" name="action" id="action" />
                        <div class="card-body p-3" id="output"></div>
                    </div>
                    
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-between">
                        <h3>Who is online?</h3>
                        <div id="status"></div>
                    </div>
                    <ul class="list-group list-group-flush" id="online_users">
                    </ul>
                </div>
            </div>
        </div>
    </body>
    <script>
        let socket = null;
        let outPut = document.getElementById("output");
        let userField = document.getElementById("username");
        let messageField = document.getElementById("message");
        let sendButton = document.getElementById("sendBtn");
        let onlineUsers = document.getElementById("online_users");

        // send a message to server when user leaves
        window.onbeforeunload = function() {
            console.log("User disconnected")
            let jsonData = {};
            jsonData["action"] = "left";
            socket.send(JSON.stringify(jsonData));
        }

        document.addEventListener("DOMContentLoaded", function() {
            socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws");
            socket.debug = true;
            socket.timeoutInterval = 3000;

            const offline = `<span class="badge rounded-pill bg-danger">Disconnected</span>`
            const online = `<span class="badge rounded-pill bg-primary">Connected</span>`
            let statusBadge = document.getElementById("status");
            
            socket.onopen = () => {
                console.log("Websocket connection established")
                statusBadge.innerHTML = online
            }

            socket.onclose = () => {
                console.log("Websocket connection closed")
                statusBadge.innerHTML = offline
            }

            socket.onerror = error => {
                console.log(error)
                statusBadge.innerHTML = offline
            }

            socket.onmessage = msg => {
                // console.log(msg)
                // Our message will be in `msg.data` and be in JSON
                let data = JSON.parse(msg.data)
                console.log("Action:", data.Action)

                switch (data.Action) {
                    case "list_users":
                        // grab a unordered list by ID
                        let ul = onlineUsers;
                        // empty the list
                        while (ul.firstChild) ul.removeChild(ul.firstChild);
                        // if at least one user is connected
                        if (data.connected_users.length > 0) {
                            // loop through every user and create a list item for them
                            data.connected_users.forEach(function(item) {
                                let li = document.createElement("li")
                                li.classList.add("list-group-item");
                                li.appendChild(document.createTextNode(item))
                                ul.appendChild(li)
                            })
                        }
                        break;

                    case "broadcast":
                        // Take the message broadcast and output it into div with ID output
                        outPut.innerHTML = outPut.innerHTML + data.Message + "<br/>";
                        break;
                }
            }

            // When user enters string into username field send it to backend
            // Trigger on change
            userField.addEventListener("change", function() {
                let jsonData = {};
                // Set `action` to username to be able to identify message in the backend
                jsonData["action"] = "username";
                // Take the value of username and send it
                jsonData["username"] = this.value;
                socket.send(JSON.stringify(jsonData))
            })

            // When user types in a message and presses Enter send message
            messageField.addEventListener("keydown", function(event) {
                if (event.code === "Enter") {
                    // First check if you are connected
                    if (!socket) {
                        console.log("You are not connected")
                        return false
                    }
                    // Prevent having browser overthink the event
                    event.stopPropagation();
                    // Makes sure that user typed username and message before sending
                    if ((userField.value === "") || (messageField.value === "")) {
                        errorToast("Username and Message cannot be empty!");
                        return false;
                    } else {
                        // Trigger send message function below
                        sendMessage();
                    }
                    event.preventDefault();
                }
            })

            // Use SendButton to send message
            sendButton.addEventListener("click", function() {
                // Makes sure that user typed username and message before sending
                if ((userField.value === "") || (messageField.value === "")) {
                    errorToast("Username and Message cannot be empty!");
                    return false;
                } else {
                    sendMessage();
                    }
                })
            })

        function sendMessage() {
            let jsonData = {};
            // Set `action` to be `broadcast`
            jsonData["action"] = "broadcast";
            // Take username and message
            jsonData["username"] = userField.value;
            jsonData["message"] = messageField.value;
            // and send them to the backend
            socket.send(JSON.stringify(jsonData))
            // Empty message field after message was send
            messageField.value = ""
        }

        function errorToast(msg) {
            notie.alert({
                type: 'error', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
                text: msg,
                stay: false, // optional, default = false
                time: 2, // optional, default = 3, minimum = 1,
                position: 'bottom' // optional, default = 'top', enum: ['top', 'bottom']
            })
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="/static/reconnecting-websocket.min.js"></script>
</html>